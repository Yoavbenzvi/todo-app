{"version":3,"sources":["components/InputField.js","components/Task.js","components/Display.js","components/ControlPanel.js","containers/App.js","serviceWorker.js","index.js"],"names":["InputField","addTask","handleInputChange","inputValue","className","onChange","value","placeholder","type","onClick","Task","text","status","toggleTaskStatus","index","deleteTask","id","e","stopPropagation","deleteSelf","Display","tasks","showAll","map","task","i","key","filter","length","ControlPanel","toggleShow","clearDisplay","active","disabled","App","setState","newTask","allTasks","target","state","newTasksArray","boolean","changedTask","splice","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAuBeA,EArBI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,kBAAmBC,EAAiB,EAAjBA,WACjD,OACC,yBAAKC,UAAU,8CACd,2BACCC,SAAUH,EACVI,MAAOH,EACPI,YAAY,oBACZC,KAAK,OACLJ,UAAU,2GAEX,4BACCK,QAASR,EACTO,KAAK,SACLJ,UAAU,oHAHX,SCkBYM,EA5BF,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,iBAAkBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAWtD,OACC,wBACCC,GAAG,OACHZ,UAAWQ,EAZZ,gIAEA,kIAWCH,QAAS,kBAAMI,EAAiBC,KAEhC,uBAAGV,UAAWQ,EAAS,GAAK,gBAAiBD,GAC7C,4BACCF,QAAS,SAACQ,GAAD,OAbO,SAACA,GACnBF,EAAWD,GACXG,EAAEC,kBAWgBC,CAAWF,IAC3Bb,UAAU,+CAFX,OCoCYgB,EArDC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,QAAST,EAAmC,EAAnCA,iBAAkBE,EAAiB,EAAjBA,WA6CpD,OACC,yBAAKX,UAAU,kCACd,wBAAIA,UAAU,iCAnCXkB,EACQD,EAAME,KAAI,SAACC,EAAMC,GAC3B,OACC,kBAAC,EAAD,CACCb,OAAQY,EAAKZ,OACbD,KAAMa,EAAKb,KACXE,iBAAkBA,EAClBC,MAAOW,EACPC,IAAKD,EACLV,WAAYA,OAKJM,EACTM,QAAO,SAACH,GAAD,OAAUA,EAAKZ,UACtBW,KAAI,SAACC,EAAMC,GACX,OACC,kBAAC,EAAD,CACCb,OAAQY,EAAKZ,OACbD,KAAMa,EAAKb,KACXE,iBAAkBA,EAClBC,MAAOW,EACPC,IAAKD,EACLV,WAAYA,QAlCVM,EAAMO,QAAU,EACtB,0BAAMxB,UAAU,6DAAhB,kCAGG,OC8BSyB,EArCM,SAAC,GAA2C,IAAzCP,EAAwC,EAAxCA,QAASQ,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACtCC,EACL,yFACKC,EACL,gEAED,OACC,yBAAK7B,UAAU,sDACd,6BACC,4BACCY,GAAG,MACHZ,UAAWkB,EAAUU,EAASC,EAC9BxB,QAAS,kBAAMqB,GAAW,KAH3B,OAOA,4BACCd,GAAG,SACHZ,UAAWkB,EAAUW,EAAWD,EAChCvB,QAAS,kBAAMqB,GAAW,KAH3B,WAQD,6BACC,4BACCd,GAAG,QACHZ,UAAU,+DACVK,QAASsB,GAHV,YCgEWG,E,kDArFd,aAAe,IAAD,8BACb,gBASDH,aAAe,WACd,EAAKI,SAAS,CACbC,QAAS,GACTC,SAAU,GACVf,SAAS,KAdG,EAkBdpB,kBAAoB,SAACe,GACpB,EAAKkB,SAAS,CAAEC,QAASnB,EAAEqB,OAAOhC,SAnBrB,EAsBdL,QAAU,WACT,GAAI,EAAKsC,MAAMH,QAAS,CACvB,IAAII,EAAa,sBACb,EAAKD,MAAMF,UADE,CAEhB,CAAE1B,KAAM,EAAK4B,MAAMH,QAASxB,QAAQ,KAErC,EAAKuB,SAAS,CACbE,SAAUG,EACVJ,QAAS,OA9BE,EAmCdN,WAAa,SAACW,GACb,EAAKN,SAAS,CAAEb,QAASmB,KApCZ,EAuCd5B,iBAAmB,SAACC,GACnB,IAAI0B,EAAa,YAAO,EAAKD,MAAMF,UAC/BK,EAAW,eAAQ,EAAKH,MAAMF,SAASvB,KACpB,IAAvB4B,EAAY9B,OACR8B,EAAY9B,QAAS,EACrB8B,EAAY9B,QAAS,EACzB4B,EAAc1B,GAAS4B,EAEvB,EAAKP,SAAS,CAAEE,SAAUG,KA/Cb,EAkDdzB,WAAa,SAACD,GACb,IAAI0B,EAAa,YAAO,EAAKD,MAAMF,UACnCG,EAAcG,OAAO7B,EAAO,GAC5B,EAAKqB,SAAS,CAAEE,SAAUG,KAlD1B,EAAKD,MAAQ,CACZH,QAAS,GACTC,SAAU,GACVf,SAAS,GANG,E,qDAyDb,OACC,yBAAKlB,UAAU,uCACd,yBAAKA,UAAU,0BACd,wBAAIA,UAAU,wGAAd,aAGA,kBAAC,EAAD,CACCH,QAAS2C,KAAK3C,QACdC,kBAAmB0C,KAAK1C,kBACxBC,WAAYyC,KAAKL,MAAMH,UAExB,kBAAC,EAAD,CACCvB,iBAAkB+B,KAAK/B,iBACvBS,QAASsB,KAAKL,MAAMjB,QACpBD,MAAOuB,KAAKL,MAAMF,SAClBtB,WAAY6B,KAAK7B,aAElB,kBAAC,EAAD,CACCgB,aAAca,KAAKb,aACnBT,QAASsB,KAAKL,MAAMjB,QACpBQ,WAAYc,KAAKd,mB,GA9ELe,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5089d5e6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputField = ({ addTask, handleInputChange, inputValue }) => {\r\n\treturn (\r\n\t\t<div className=\"flex items-center justify-between relative\">\r\n\t\t\t<input\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tplaceholder=\"Add a new task...\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName='p-4 pr-20 border-t-2 border-green-500 rounded bg-gray-900 text-white w-full shadow-inner outline-none\"'\r\n\t\t\t/>\r\n\t\t\t<button\r\n\t\t\t\tonClick={addTask}\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tclassName=\"text-green-400 hover:text-green-300 bg-gray-900 font-semibold py-2 px-4 absolute right-0 mr-2 focus:outline-none\"\r\n\t\t\t>\r\n\t\t\t\tADD\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default InputField;\r\n","import React from \"react\";\r\n\r\nconst Task = ({ text, status, toggleTaskStatus, index, deleteTask }) => {\r\n\tconst active =\r\n\t\t\"hover:bg-gray-700 duration-300 transition m-1 p-5 cursor-pointer border-l-8 border-orange-500 text-white flex justify-between\";\r\n\tconst disabled =\r\n\t\t\"hover:bg-gray-700 duration-300 transition m-1 p-5 cursor-pointer border-l-8 border-green-400 text-gray-500 flex justify-between\";\r\n\r\n\tconst deleteSelf = (e) => {\r\n\t\tdeleteTask(index);\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li\r\n\t\t\tid=\"task\"\r\n\t\t\tclassName={status ? active : disabled}\r\n\t\t\tonClick={() => toggleTaskStatus(index)}\r\n\t\t>\r\n\t\t\t<p className={status ? \"\" : \"line-through\"}>{text}</p>\r\n\t\t\t<button\r\n\t\t\t\tonClick={(e) => deleteSelf(e)}\r\n\t\t\t\tclassName=\"text-red-500 text-xl font-bold no-underline\"\r\n\t\t\t>\r\n\t\t\t\tX\r\n\t\t\t</button>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst Display = ({ tasks, showAll, toggleTaskStatus, deleteTask }) => {\r\n\tconst renderText = () => {\r\n\t\treturn tasks.length <= 0 ? (\r\n\t\t\t<span className=\"text-center inline-block w-full p-4 text-gray-600 text-lg\">\r\n\t\t\t\tAdd a new item to get started!\r\n\t\t\t</span>\r\n\t\t) : null;\r\n\t};\r\n\r\n\tconst renderList = () => {\r\n\t\tlet allTasks;\r\n\r\n\t\tif (showAll) {\r\n\t\t\tallTasks = tasks.map((task, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Task\r\n\t\t\t\t\t\tstatus={task.status}\r\n\t\t\t\t\t\ttext={task.text}\r\n\t\t\t\t\t\ttoggleTaskStatus={toggleTaskStatus}\r\n\t\t\t\t\t\tindex={i}\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tdeleteTask={deleteTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tallTasks = tasks\r\n\t\t\t\t.filter((task) => task.status)\r\n\t\t\t\t.map((task, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Task\r\n\t\t\t\t\t\t\tstatus={task.status}\r\n\t\t\t\t\t\t\ttext={task.text}\r\n\t\t\t\t\t\t\ttoggleTaskStatus={toggleTaskStatus}\r\n\t\t\t\t\t\t\tindex={i}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tdeleteTask={deleteTask}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn allTasks;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"h-64 md:h-96 overflow-y-scroll\">\r\n\t\t\t<ul className=\"m-0 my-4 p-0 list-none w-full\">{renderList()}</ul>\r\n\t\t\t{renderText()}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\n\r\nconst ControlPanel = ({ showAll, toggleShow, clearDisplay }) => {\r\n\tconst active =\r\n\t\t\"text-xs mr-3 hover:underline text-gray-500 focus:outline-none text-green-500 font-bold\";\r\n\tconst disabled =\r\n\t\t\"text-xs mr-3 hover:underline text-gray-500 focus:outline-none\";\r\n\r\n\treturn (\r\n\t\t<div className=\"flex py-4 border-t border-gray-900 justify-between\">\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tid=\"all\"\r\n\t\t\t\t\tclassName={showAll ? active : disabled}\r\n\t\t\t\t\tonClick={() => toggleShow(true)}\r\n\t\t\t\t>\r\n\t\t\t\t\tALL\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tid=\"active\"\r\n\t\t\t\t\tclassName={showAll ? disabled : active}\r\n\t\t\t\t\tonClick={() => toggleShow(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\tACTIVE\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tid=\"clear\"\r\n\t\t\t\t\tclassName=\"text-xs mr-3 text-red-500 focus:outline-none hover:underline\"\r\n\t\t\t\t\tonClick={clearDisplay}\r\n\t\t\t\t>\r\n\t\t\t\t\tCLEAR\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React from \"react\";\r\nimport InputField from \"../components/InputField\";\r\nimport Display from \"../components/Display\";\r\nimport ControlPanel from \"../components/ControlPanel\";\r\n\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tnewTask: \"\",\r\n\t\t\tallTasks: [],\r\n\t\t\tshowAll: true,\r\n\t\t};\r\n\t}\r\n\r\n\tclearDisplay = () => {\r\n\t\tthis.setState({\r\n\t\t\tnewTask: \"\",\r\n\t\t\tallTasks: [],\r\n\t\t\tshowAll: true,\r\n\t\t});\r\n\t};\r\n\r\n\thandleInputChange = (e) => {\r\n\t\tthis.setState({ newTask: e.target.value });\r\n\t};\r\n\r\n\taddTask = () => {\r\n\t\tif (this.state.newTask) {\r\n\t\t\tlet newTasksArray = [\r\n\t\t\t\t...this.state.allTasks,\r\n\t\t\t\t{ text: this.state.newTask, status: true },\r\n\t\t\t];\r\n\t\t\tthis.setState({\r\n\t\t\t\tallTasks: newTasksArray,\r\n\t\t\t\tnewTask: \"\",\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\ttoggleShow = (boolean) => {\r\n\t\tthis.setState({ showAll: boolean });\r\n\t};\r\n\r\n\ttoggleTaskStatus = (index) => {\r\n\t\tlet newTasksArray = [...this.state.allTasks];\r\n\t\tlet changedTask = { ...this.state.allTasks[index] };\r\n\t\tchangedTask.status === true\r\n\t\t\t? (changedTask.status = false)\r\n\t\t\t: (changedTask.status = true);\r\n\t\tnewTasksArray[index] = changedTask;\r\n\r\n\t\tthis.setState({ allTasks: newTasksArray });\r\n\t};\r\n\r\n\tdeleteTask = (index) => {\r\n\t\tlet newTasksArray = [...this.state.allTasks];\r\n\t\tnewTasksArray.splice(index, 1);\r\n\t\tthis.setState({ allTasks: newTasksArray });\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"bg-gray-800 text-white min-h-screen\">\r\n\t\t\t\t<div className=\"mx-auto lg:w-1/3 w-4/5\">\r\n\t\t\t\t\t<h1 className=\"uppercase md:text-2xl text-xl block font-bold py-3 md:py-6 text-gray-400 tracking-widest text-center\">\r\n\t\t\t\t\t\tTodo List\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<InputField\r\n\t\t\t\t\t\taddTask={this.addTask}\r\n\t\t\t\t\t\thandleInputChange={this.handleInputChange}\r\n\t\t\t\t\t\tinputValue={this.state.newTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Display\r\n\t\t\t\t\t\ttoggleTaskStatus={this.toggleTaskStatus}\r\n\t\t\t\t\t\tshowAll={this.state.showAll}\r\n\t\t\t\t\t\ttasks={this.state.allTasks}\r\n\t\t\t\t\t\tdeleteTask={this.deleteTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ControlPanel\r\n\t\t\t\t\t\tclearDisplay={this.clearDisplay}\r\n\t\t\t\t\t\tshowAll={this.state.showAll}\r\n\t\t\t\t\t\ttoggleShow={this.toggleShow}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/main.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}